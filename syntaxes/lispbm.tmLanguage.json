{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "LispBM",
	"patterns": [
		{
			"include": "#expressions"
		},
		{
			"include": "#function-lists"
		},
		{
			"include": "#quoted-lists"
		}
	],
	"repository": {
		"expressions": {
			"patterns": [
				{
					"include": "#macro-defs"
				},
				{
					"include": "#defun-defs"
				},
				{
					"include": "#lambda-defs"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#pseudo-keywords"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#lang-constants"
				},
				{
					"include": "#function-names"
				},
				{
					"include": "#quoted-symbol"
				},
				{
					"include": "#symbol"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#let-bindings-lists"
				},
				{
					"include": "#quoted-lists"
				},
				{
					"include": "#lists"
				},
				{
					"include": "#comments"
				}
			]
		},
		"quoted-expressions": {
			"patterns": [
				{
					"include": "#macro-defs"
				},
				{
					"include": "#defun-defs"
				},
				{
					"include": "#lambda-defs"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#pseudo-keywords"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#lang-constants"
				},
				{
					"include": "#quoted-symbol"
				},
				{
					"include": "#symbol"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#inserted-lists"
				},
				{
					"include": "#quoted-lists"
				},
				{
					"include": "#quoted-child-lists"
				},
				{
					"include": "#comments"
				}
			]
		},
		"lists": {
			"name": "meta.list.function.lispbm",
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.paren.begin.lispbm"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.end.lispbm"
				}
			},
			"patterns": [
				{
					"include": "#expressions"
				}
			]
		},
		"quoted-child-lists": {
			"name": "meta.list.quoted.lispbm",
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.paren.begin.lispbm"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.end.lispbm"
				}
			},
			"patterns": [
				{
					"include": "#quoted-expressions"
				}
			]
		},
		"quoted-lists": {
			"name": "meta.list.quoted.lispbm",
			"begin": "(`|')(\\()",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.lispbm"
				},
				"2": {
					"name": "punctuation.paren.begin.lispbm"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.end.lispbm"
				}
			},
			"patterns": [
				{
					"include": "#quoted-expressions"
				}
			]
		},
		"inserted-lists": {
			"name": "meta.list.quoted.lispbm",
			"begin": "(,@?)(\\()",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.lispbm"
				},
				"2": {
					"name": "punctuation.paren.begin.lispbm"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.end.lispbm"
				}
			},
			"patterns": [
				{
					"include": "#expressions"
				}
			]
		},
		"let-bindings-lists": {
			"name": "meta.list.let.bindings.lispbm",
			"begin": "(?<=let\\s+)(\\()",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.paren.begin.lispbm"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.end.lispbm"
				}
			},
			"patterns": [
				{
					"include": "#let-bindings"
				}
			]
		},
		"let-bindings": {
			"name": "meta.list.let.binding.lispbm",
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.paren.begin.lispbm"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.end.lispbm"
				}
			},
			"patterns": [
				{
					"begin": "\\s",
					"end": "(?=\\))",
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				},
				{
					"include": "#variable-names"
				}
			]
		},
		"variable-names": {
			"patterns": [
				{
					"name": "variable.other.lispbm",
					"match": "(?<=\\()[a-zA-Z+\\-*/=<>#][a-zA-Z0-9+\\-*/=<>!?]*(?=$|\\s|\\)|\\])"
				},
				{
					"name": "meta.list.destructured-names.lispbm",
					"begin": "(?<=\\()\\(",
					"end": "\\)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.paren.begin.lispbm"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.paren.end.lispbm"
						}
					},
					"patterns": [
						{
							"include": "#symbols"
						},
						{
							"include": "#operators"
						}
					]
				}
			]
		},
		"macro-defs": {
			"name": "meta.function.macro.lispbm",
			"begin": "(?<=\\()(macro)",
			"end": "(?=\\))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.lispbm"
				}
			},
			"patterns": [
				{
					"name": "meta.list.parameters.lispbm",
					"begin": "(?<=(?:macro)\\s+)(\\()",
					"end": "\\)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.paren.begin.lispbm"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.paren.end.lispbm"
						}
					},
					"patterns": [
						{
							"include": "#parameters"
						}
					]
				},
				{
					"include": "#expressions"
				}
			]
		},
		"defun-defs": {
			"name": "meta.function.lispbm",
			"begin": "(?<=\\()(defun)",
			"end": "(?=\\))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.pseudo.lispbm"
				}
			},
			"patterns": [
				{
					"begin": "(?<=defun\\s+)([a-zA-Z+\\-*/=<>#][a-zA-Z0-9+\\-*/=<>!?]*)\\s+(\\()",
					"end": "\\)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.lispbm"
						},
						"2": {
							"name": "punctuation.paren.begin.lispbm"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.paren.end.lispbm"
						}
					},
					"patterns": [
						{
							"include": "#parameters"
						}
					]
				},
				{
					"include": "#expressions"
				}
			]
		},
		"lambda-defs": {
			"name": "meta.function.lambda.lispbm",
			"begin": "(?<=\\()(lambda|fn)",
			"end": "(?=\\))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.lispbm"
				}
			},
			"patterns": [
				{
					"name": "meta.list.parameters.lispbm",
					"begin": "(?<=(?:lambda|fn)\\s+)(\\()",
					"end": "\\)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.paren.begin.lispbm"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.paren.end.lispbm"
						}
					},
					"patterns": [
						{
							"include": "#parameters"
						}
					]
				},
				{
					"include": "#expressions"
				}
			]
		},
		"symbol": {
			"name": "variable.other.lispbm",
			"match": "(?<=^|\\s|,|\\(|\\[)[a-zA-Z+\\-*/=<>#][a-zA-Z0-9+\\-*/=<>!?]*(?=$|\\s|\\)|\\])"
		},
		"parameters": {
			"name": "variable.parameter.lispbm",
			"match": "(?<=^|\\s|,|\\(|\\[)[a-zA-Z+\\-*/=<>#][a-zA-Z0-9+\\-*/=<>!?]*(?=$|\\s|\\)|\\])"
		},
		"quoted-symbol": {
			"name": "variable.other.constant.lispbm",
			"match": "(?<=^|\\s|,|\\(|\\[)'[a-zA-Z+\\-*/=<>#][a-zA-Z0-9+\\-*/=<>!?]*(?=$|\\s|\\)|\\])"
		},
		"function-names": {
			"name": "entity.name.function.lispbm",
			"match": "(?<=^|\\()[a-zA-Z+\\-*/=<>#][a-zA-Z0-9+\\-*/=<>!?]*(?=\\s|\\))"
		},
		"keywords": {
			"name": "keyword.control.special-form.lispbm",
			"match": "(?<=^|\\s|\\(|\\[)(?:if|lambda|let|var|define|progn|read|match|macro|call-cc|recv|cond)(?=$|\\s|\\)|\\])"
		},
		"pseudo-keywords": {
			"name": "keyword.control.pseudo.lispbm",
			"match": "(?<=^|\\s|\\(|\\[)(?:def|defun|fn|setvar|set|setq|looprange|loopwhile|spawn|spawn-trap|wait|yield|atomic|eval|eval-program|read-program|car|cons|list|length|range|append|ix|setix|setcar|setcdr|acons|assoc|cossa|setassoc|array-create|array-size|array-write|array-clear|match)(?=$|\\s|\\)|\\])"
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.lispbm",
					"match": "(?<=^|\\s|\\(|\\[)(?:and|or|not|\\+|-|\\*|\\/|mod|=|!=|eq|not-eq|>|<|>=|<=|not|shl|shr|type-of|\\?)"
				},
				{
					"name": "keyword.operator.lispbm",
					"match": "\\s\\.\\s"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.lispbm",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.lispbm",
					"match": "\\[a-z\"\\\\]"
				}
			]
		},
		"numbers": {
			"name": "constant.numeric.lispbm",
			"match": "\\b(?:[0-9]+\\.?[0-9]*|0x[0-9a-fA-F]+)\\b"
		},
		"lang-constants": {
			"name": "constant.language",
			"match": "\\b(?:t|f|nil)\\b"
		},
		"comments": {
			"name": "comment.line.semicolon.lispbm",
			"match": "(;).*$\n?",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.lispbm"
				}
			}
		}
	},
	"scopeName": "source.lispbm"
}